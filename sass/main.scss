@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";

@import "base/base";
@import "base/animations";
@import "base/typography";
@import "base/utilities";

@import "components/button";

@import "layout/header";

@import "pages/home";

/* NOTE: Rely more on specificity than on the order of selectors */ /* BEM */
/* Block -  standalone component that is meaningful on its own
Element - part of a block that has no standalone meaning
Modifier - a diff version of a block or an element */
/* Architecture */
/* 7 different folders for partial Sass files, and 1 main Sass file to import all other files into a compiled CSS stysheet.
base/
components/
layout/ 
pages/
themes/ 
abstracts/
vendors/ */
/* NOTE: Main Sass Features */
/* 1. Variables -> For reusable values such as colors, font-sizes, spacing, etc.
2. Nesting -> to nest selectors inside of one another, allowing us to write less code;
3. Operators -> for mathematical operations right inside of CSS
4. Partials and imports -> to write CSS in differentn files and importing them all into one single file
5. Mixins -> to write reusable pieces of CSS code
6. Functions -> similar to mixins, with difference that they produce a value that can be used in other places
7. Extends -> to make different selectors inherit declarations that are common to all of them.
8. control directives -> for writing complex code using conditionals and loops */
/* ✅ Use @extend when:
You don’t need customization (no parameters).
You want to reduce duplicate CSS and keep the file size smaller.

✅ Use @mixin when:
You need customization (passing parameters).
You are styling different elements that don’t share a common base class.
The styles cannot be combined in one declaration (e.g., different media queries). */
// "scripts": {
//   "compile:sass": "sass sass/main.scss css/style.css -w"
// },
